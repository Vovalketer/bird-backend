spring:
    profiles:
        active: ${ACTIVE_PROFILE:dev}
    docker:
        compose:
            file: ./docker/compose.yml
            lifecycle-management: start-and-stop
            skip:
                in-tests: false
    jackson:
        default-property-inclusion: NON_NULL
        serialization:
            fail-on-empty-beans: false
            close-closeable: true
            flush-after-write-value: true
            write-date-keys-as-timestamps: false
        deserialization:
            fail-on-unknown-properties: false
    datasource:
        url: jdbc:posgresql://${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRESQL_DATABASE}
        username: ${POSTGRESQL_USERNAME}
        password: ${POSTGRESQL_PASSWORD}
    jpa:
        open-in-view: false
        database-platform: org.hibernate.dialect.PostgreSQLInnoDBDialect
        generate-ddl: false
        show-sql: true
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                globally_quoted_identifiers: true
                dialect: org.hibernate.dialect.PostgreSQLDialect
                format_sql: true
                jdbc:
                    time_zone: UTC
    sql:
        init:
            mode: never
            continue-on-error: false
            schema-locations: classpath:/data/schema.sql
            data-locations: classpath:/data/data.sql
    servlet:
        multipart:
            enabled: true
            max-file-size: 20MB
            max-request-size: 20MB
    mail:
        host: ${EMAIL_HOST}
        port: ${EMAIL_PORT}
        token: ${EMAIL_TOKEN}
        username: ${EMAIL_ID}
        password: ${EMAIL_PASSWORD}
        default-encoding: UTF-8
        properties:
            mail:
                mime:
                    charset: UTF
                smtp:
                    writetimeout: 10000
                    connectiontimeout: 10000
                    timeout: 10000
                    auth: true
                    starttls:
                        enable: true
                        required: true
        verify:
            host: ${VERIFY_EMAIL_HOST}
    application:
        name: bird
server:
    port: ${CONTAINER_PORT:8080}
    error:
        path: /user/error
        whitelabel:
            enabled: false
jwt:
    access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
    refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION}
    issuer: ${JWT_ISSUER}
    secret: ${JWT_SECRET}
